import numpy as np
import itertools


# ref: https://medium.com/100-days-of-algorithms/51a41127f31
def zigzag_value(i, j, n):
    """
        Get zigzag (i, j) value in (n * n) square matrix
        :param i: row of index
        :param j: column of index
        :param n: width of square matrix
        :return: value of (i, j) in zigzag (n * n) square matrix
        """
    # upper side of interval
    if i + j >= n:
        return n * n - 1 - zigzag_value(n - 1 - i, n - 1 - j, n)
    # lower side of interval
    k = (i + j) * (i + j + 1) // 2
    return k + i if (i + j) & 1 else k + j


# ref: https://medium.com/100-days-of-algorithms/51a41127f31
def zigzag_index(k, n):
    """
        Get index of value k in (n * n) square matrix
        :param k: value in matrix we want to search
        :param n: width of square matrix
        :return: index of value k in zigzag (n * n) square matrix
        """
    # upper side of interval
    if k >= n * (n + 1) // 2:
        i, j = zigzag_index(n * n - 1 - k, n)
        return n - 1 - i, n - 1 - j
    # lower side of interval
    i = int((np.sqrt(1 + 8 * k) - 1) / 2)
    j = k - i * (i + 1) // 2
    return (j, i - j) if i & 1 else (i - j, j)


def special_int2bin_str(num):
    """
        Return binary value of number, but negative number reverse all '1' and '0'
        :param num: int number
        :return: binary value of number
        """
    bin_len = len('{0:b}'.format(abs(num)))
    return '{0:{fill}{repeat}b}'.format(abs(num) ^ int(('0' if num >= 0 else '1') * bin_len, 2),
                                        repeat=bin_len, fill='0')


def special_bin_str2int(s):
    """
        Return int value of binary string, but if start with '0' means it is negative value
        :param s: string of binary stream
        :return: int value
        """
    return (-1 if s.startswith('0') else 1) * (int(s, 2) ^ int(('1' if s.startswith('0') else '0') * len(s), 2))


def write_bit2file(value, filename):
    """
        Write string of bit stream to file
        :param value: bit stream which will be written
        :param filename: output file name
        :return:
        """
    with open(filename, 'wb') as f:
        i = 0
        v_len = len(value)
        while i < v_len:
            b = value[i: i + 8 if i + 8 <= v_len else v_len]
            if len(b) < 8:
                b = b + '0' * (8 - len(b))
            v = int(b, 2)
            f.write(v.to_bytes(1, byteorder='big'))
            i += 8


def read_binstr_frome_file(filename):
    """
        Read bit stream from file
        :param filename: input file name
        :return: bit string
        """
    binstr = ''
    with open(filename, 'rb') as f:
        while True:
            byte = f.read(1)
            if not byte:
                break
            i = int.from_bytes(byte, byteorder='big')
            byte_str = special_int2bin_str(i) if i != 0 else '0'
            byte_str = '0' * (8 - len(byte_str)) + byte_str
            binstr += byte_str
    return binstr


def get_quantization_table_by_factor(qf, qt='luminance'):
    """
        Get quantization table by given quantization factor, and factor must in [5, 10, 50, 80, 90]
        :param qf: quantization factor
        :param qt: quantization type either 'l' (luminance) nor 'c' (chrominance)
        :return: quantization table by quantization factor
        """
    if qf not in [5, 10, 50, 80, 90]:
        raise ValueError('Quantization factor must in [5, 10, 50, 80, 90]')
    qf = 5000 / qf if qf < 50 else 200 - (qf * 2)
    qt = qt.lower()
    if qt not in ['luminance', 'chromonance']:
        raise ValueError("Not such quantization table of {}".format(qt))
    q_table = quantization_table[qt]
    table = np.floor(q_table * qf / 100).astype(np.int16)
    table[table == 0] = 1
    return table


def get_block_iterator(row, col, block_size=8):
    """
        Get block index iterator
        :param row: total row of image
        :param col:  total column of image
        :param block_size: size of block
        :return: iterator of every 8*8 block index
        """
    return itertools.product(
        range(0, row if row % block_size == 0 else (row // block_size + 1) * block_size, block_size),
        range(0, col if col % block_size == 0 else (col // block_size + 1) * block_size, block_size))


n = 8
zigzag_value_table = [[zigzag_value(i, j, n) for j in range(n)] for i in range(n)]
zigzag_index_table = [zigzag_index(k, n) for k in range(n * n)]

quantization_table = {
    'luminance': np.array(
        [
            [16, 11, 10, 16, 24, 40, 51, 61],
            [12, 12, 14, 19, 26, 58, 60, 55],
            [14, 13, 16, 24, 40, 57, 69, 56],
            [14, 17, 22, 29, 51, 87, 80, 62],
            [18, 22, 37, 56, 68, 109, 103, 77],
            [24, 35, 55, 64, 81, 104, 113, 92],
            [49, 64, 78, 87, 103, 121, 120, 101],
            [72, 92, 95, 98, 112, 100, 103, 99]
        ]),
    'chromonance': np.array(
        [
            [17, 18, 24, 47, 99, 99, 99, 99],
            [18, 21, 26, 66, 99, 99, 99, 99],
            [24, 26, 56, 99, 99, 99, 99, 99],
            [47, 66, 99, 99, 99, 99, 99, 99],
            [99, 99, 99, 99, 99, 99, 99, 99],
            [99, 99, 99, 99, 99, 99, 99, 99],
            [99, 99, 99, 99, 99, 99, 99, 99],
            [99, 99, 99, 99, 99, 99, 99, 99]
        ])
}

_DC_table = {
    'luminance': ["00", "010", "011", "100", "101", "110", "1110", "11110", "111110", "1111110", "11111110", "111111110"],
    'chromonance': ["00", "01", "10", "110", "1110", "11110", "111110", "1111110", "11111110", "111111110", "1111111110",
           "1111111110"]
}

_AC_table_cw2rs = {
    'luminance': {(0, 0): '1010', (0, 1): '00', (0, 2): '01', (0, 3): '100', (0, 4): '1011', (0, 5): '11010',
            (0, 6): '1111000', (0, 7): '11111000', (0, 8): '1111110110', (0, 9): '1111111110000010',
            (0, 10): '1111111110000011', (1, 1): '1100', (1, 2): '11011', (1, 3): '1111001', (1, 4): '111110110',
            (1, 5): '11111110110', (1, 6): '1111111110000100', (1, 7): '1111111110000101',
            (1, 8): '1111111110000110',
            (1, 9): '1111111110000111', (1, 10): '1111111110001000', (2, 1): '11100', (2, 2): '11111001',
            (2, 3): '1111110111', (2, 4): '111111110100', (2, 5): '1111111110001001', (2, 6): '1111111110001010',
            (2, 7): '1111111110001011', (2, 8): '1111111110001100', (2, 9): '1111111110001101',
            (2, 10): '1111111110001110', (3, 1): '111010', (3, 2): '111110111', (3, 3): '111111110101',
            (3, 4): '1111111110001111', (3, 5): '1111111110010000', (3, 6): '1111111110010001',
            (3, 7): '1111111110010010', (3, 8): '1111111110010011', (3, 9): '1111111110010100',
            (3, 10): '1111111110010101', (4, 1): '111011', (4, 2): '1111111000', (4, 3): '1111111110010110',
            (4, 4): '1111111110010111', (4, 5): '1111111110011000', (4, 6): '1111111110011001',
            (4, 7): '1111111110011010', (4, 8): '1111111110011011', (4, 9): '1111111110011100',
            (4, 10): '1111111110011101', (5, 1): '1111010', (5, 2): '11111110111', (5, 3): '1111111110011110',
            (5, 4): '1111111110011111', (5, 5): '1111111110100000', (5, 6): '1111111110100001',
            (5, 7): '1111111110100010', (5, 8): '1111111110100011', (5, 9): '1111111110100100',
            (5, 10): '1111111110100101', (6, 1): '1111011', (6, 2): '111111110110', (6, 3): '1111111110100110',
            (6, 4): '1111111110100111', (6, 5): '1111111110101000', (6, 6): '1111111110101001',
            (6, 7): '1111111110101010', (6, 8): '1111111110101011', (6, 9): '1111111110101100',
            (6, 10): '1111111110101101', (7, 1): '11111010', (7, 2): '111111110111', (7, 3): '1111111110101110',
            (7, 4): '1111111110101111', (7, 5): '1111111110110000', (7, 6): '1111111110110001',
            (7, 7): '1111111110110010', (7, 8): '1111111110110011', (7, 9): '1111111110110100',
            (7, 10): '1111111110110101', (8, 1): '111111000', (8, 2): '111111111000000',
            (8, 3): '1111111110110110',
            (8, 4): '1111111110110111', (8, 5): '1111111110111000', (8, 6): '1111111110111001',
            (8, 7): '1111111110111010', (8, 8): '1111111110111011', (8, 9): '1111111110111100',
            (8, 10): '1111111110111101', (9, 1): '111111001', (9, 2): '1111111110111110',
            (9, 3): '1111111110111111',
            (9, 4): '1111111111000000', (9, 5): '1111111111000001', (9, 6): '1111111111000010',
            (9, 7): '1111111111000011', (9, 8): '1111111111000100', (9, 9): '1111111111000101',
            (9, 10): '1111111111000110', (10, 1): '111111010', (10, 2): '1111111111000111',
            (10, 3): '1111111111001000', (10, 4): '1111111111001001', (10, 5): '1111111111001010',
            (10, 6): '1111111111001011', (10, 7): '1111111111001100', (10, 8): '1111111111001101',
            (10, 9): '1111111111001110', (10, 10): '1111111111001111', (11, 1): '1111111001',
            (11, 2): '1111111111010000', (11, 3): '1111111111010001', (11, 4): '1111111111010010',
            (11, 5): '1111111111010011', (11, 6): '1111111111010100', (11, 7): '1111111111010101',
            (11, 8): '1111111111010110', (11, 9): '1111111111010111', (11, 10): '1111111111011000',
            (12, 1): '1111111010', (12, 2): '1111111111011001', (12, 3): '1111111111011010',
            (12, 4): '1111111111011011', (12, 5): '1111111111011100', (12, 6): '1111111111011101',
            (12, 7): '1111111111011110', (12, 8): '1111111111011111', (12, 9): '1111111111100000',
            (12, 10): '1111111111100001', (13, 1): '11111111000', (13, 2): '1111111111100010',
            (13, 3): '1111111111100011', (13, 4): '1111111111100100', (13, 5): '1111111111100101',
            (13, 6): '1111111111100110', (13, 7): '1111111111100111', (13, 8): '1111111111101000',
            (13, 9): '1111111111101001', (13, 10): '1111111111101010', (14, 1): '1111111111101011',
            (14, 2): '1111111111101100', (14, 3): '1111111111101101', (14, 4): '1111111111101110',
            (14, 5): '1111111111101111', (14, 6): '1111111111110000', (14, 7): '1111111111110001',
            (14, 8): '1111111111110010', (14, 9): '1111111111110011', (14, 10): '1111111111110100',
            (15, 0): '11111111001', (15, 1): '1111111111110101', (15, 2): '1111111111110110',
            (15, 3): '1111111111110111', (15, 4): '1111111111111000', (15, 5): '1111111111111001',
            (15, 6): '1111111111111010', (15, 7): '1111111111111011', (15, 8): '1111111111111100',
            (15, 9): '1111111111111101', (15, 10): '1111111111111110'},
    'chromonance': {(0, 0): '00', (0, 1): '01', (0, 2): '100', (0, 3): '1010', (0, 4): '11000', (0, 5): '11001',
           (0, 6): '111000', (0, 7): '1111000', (0, 8): '111110100', (0, 9): '1111110110',
           (0, 10): '111111110100', (1, 1): '1011', (1, 2): '111001', (1, 3): '11110110',
           (1, 4): '111110101', (1, 5): '11111110110', (1, 6): '111111110101', (1, 7): '1111111110001000',
           (1, 8): '1111111110001001', (1, 9): '1111111110001010', (1, 10): '1111111110001011',
           (2, 1): '11010', (2, 2): '11110111', (2, 3): '1111110111', (2, 4): '111111110110',
           (2, 5): '111111111000010', (2, 6): '1111111110001100', (2, 7): '1111111110001101',
           (2, 8): '1111111110001110', (2, 9): '1111111110001111', (2, 10): '1111111110010000',
           (3, 1): '11011', (3, 2): '11111000', (3, 3): '1111111000', (3, 4): '111111110111',
           (3, 5): '1111111110010001', (3, 6): '1111111110010010', (3, 7): '1111111110010011',
           (3, 8): '1111111110010100', (3, 9): '1111111110010101', (3, 10): '1111111110010110',
           (4, 1): '111010', (4, 2): '111110110', (4, 3): '1111111110010111', (4, 4): '1111111110011000',
           (4, 5): '1111111110011001', (4, 6): '1111111110011010', (4, 7): '1111111110011011',
           (4, 8): '1111111110011100', (4, 9): '1111111110011101', (4, 10): '1111111110011110',
           (5, 1): '111011', (5, 2): '1111111001', (5, 3): '1111111110011111', (5, 4): '1111111110100000',
           (5, 5): '1111111110100001', (5, 6): '1111111110100010', (5, 7): '1111111110100011',
           (5, 8): '1111111110100100', (5, 9): '1111111110100101', (5, 10): '1111111110100110',
           (6, 1): '1111001', (6, 2): '11111110111', (6, 3): '1111111110100111',
           (6, 4): '1111111110101000', (6, 5): '1111111110101001', (6, 6): '1111111110101010',
           (6, 7): '1111111110101011', (6, 8): '1111111110101100', (6, 9): '1111111110101101',
           (6, 10): '1111111110101110', (7, 1): '1111010', (7, 2): '111111110000',
           (7, 3): '1111111110101111', (7, 4): '1111111110110000', (7, 5): '1111111110110001',
           (7, 6): '1111111110110010', (7, 7): '1111111110110011', (7, 8): '1111111110110100',
           (7, 9): '1111111110110101', (7, 10): '1111111110110110', (8, 1): '11111001',
           (8, 2): '1111111110110111', (8, 3): '1111111110111000', (8, 4): '1111111110111001',
           (8, 5): '1111111110111010', (8, 6): '1111111110111011', (8, 7): '1111111110111100',
           (8, 9): '1111111110111110', (8, 10): '1111111110111111', (9, 1): '111110111',
           (9, 2): '1111111111000000', (9, 3): '1111111111000001', (9, 4): '1111111111000010',
           (9, 5): '1111111111000011', (9, 6): '1111111111000100', (9, 7): '1111111111000101',
           (9, 8): '1111111111000110', (9, 9): '1111111111000111', (9, 10): '1111111111001000',
           (10, 1): '111111000', (10, 2): '1111111111001001', (10, 3): '1111111111001010',
           (10, 4): '1111111111001011', (10, 5): '1111111111001100', (10, 6): '1111111111001101',
           (10, 7): '1111111111001110', (10, 8): '1111111111001111', (10, 9): '1111111111010000',
           (10, 10): '1111111111010001', (11, 1): '111111001', (11, 2): '1111111111010010',
           (11, 3): '1111111111010011', (11, 4): '1111111111010100', (11, 5): '1111111111010101',
           (11, 6): '1111111111010110', (11, 7): '1111111111010111', (11, 8): '1111111111011000',
           (11, 9): '1111111111011001', (11, 10): '1111111111011010', (12, 1): '111111010',
           (12, 2): '1111111111011011', (12, 3): '1111111111011100', (12, 4): '1111111111011101',
           (12, 5): '1111111111011110', (12, 6): '1111111111011111', (12, 7): '1111111111100000',
           (12, 8): '1111111111100001', (12, 9): '1111111111100010', (12, 10): '1111111111100011',
           (13, 1): '11111111001', (13, 2): '1111111111100100', (13, 3): '1111111111100101',
           (13, 4): '1111111111100110', (13, 5): '1111111111100111', (13, 6): '1111111111101000',
           (13, 7): '1111111111101001', (13, 8): '1111111111101010', (13, 9): '1111111111101011',
           (13, 10): '1111111111101100', (14, 1): '11111111100000', (14, 2): '1111111111101101',
           (14, 3): '1111111111101110', (14, 4): '1111111111101111', (14, 5): '1111111111110000',
           (14, 6): '1111111111110001', (14, 7): '1111111111110010', (14, 8): '1111111111110011',
           (14, 9): '1111111111110100', (14, 10): '1111111111110101', (15, 1): '111111111000011',
           (15, 2): '1111111111110110', (15, 3): '1111111111110111', (15, 4): '1111111111111000',
           (15, 5): '1111111111111001', (15, 6): '1111111111111010', (15, 7): '1111111111111011',
           (15, 8): '1111111111111100', (15, 9): '1111111111111101', (15, 10): '1111111111111110',
           (15, 0): '1111111010'
           }
}
_AC_table_rs2cw = {pk: {v: k for k, v in pv.items()} for pk, pv in _AC_table_cw2rs.items()}

_DC = -1
_EOB = -2
_ZRL = -3

channel_select = ['luminance', 'chromonance', 'chromonance']
